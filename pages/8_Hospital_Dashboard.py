import streamlit as st
from backend.services.data_service import DataService
from shared.types import Position
from datetime import datetime

st.set_page_config(
    page_title="Klinik Dashboard - studiPraxis",
    page_icon="üè•"
)

# Check if user is logged in
if 'hospital_id' not in st.session_state or not st.session_state.hospital_id:
    st.error("Bitte melden Sie sich an, um auf das Dashboard zuzugreifen.")
    st.stop()

# Initialize data service
data_service = DataService()

# Get hospital profile
hospital = data_service.get_hospital(st.session_state.hospital_id)
if not hospital:
    st.error("Klinik nicht gefunden.")
    st.stop()

st.markdown(f"### Willkommen, {hospital.name}!")

# Create tabs for different sections
tab1, tab2, tab3 = st.tabs(["Positionen verwalten", "Bewerbungen", "Profil"])

with tab1:
    st.markdown("#### Positionen verwalten")
    
    # Add new position form
    with st.expander("Neue Position hinzuf√ºgen"):
        with st.form("new_position_form"):
            department = st.text_input("Abteilung")
            title = st.text_input("Positionstitel")
            description = st.text_area("Beschreibung")
            duration = st.text_input("Dauer (z.B. 3 Monate)")
            requirements = st.text_area("Anforderungen (eine pro Zeile)")
            stipend = st.number_input("Verg√ºtung (‚Ç¨)", min_value=0.0, step=100.0)
            
            submitted = st.form_submit_button("Position hinzuf√ºgen")
            if submitted:
                try:
                    # Convert requirements to list
                    requirements_list = [r.strip() for r in requirements.split("\n") if r.strip()]
                    
                    position = Position(
                        id="",  # Will be generated by service
                        hospital_id=hospital.id,
                        department=department,
                        title=title,
                        description=description,
                        duration=duration,
                        requirements=requirements_list,
                        stipend=stipend,
                        created_at=None,  # Will be set by service
                        updated_at=None   # Will be set by service
                    )
                    
                    data_service.create_position(position)
                    st.success("Position erfolgreich hinzugef√ºgt!")
                    st.rerun()
                except Exception as e:
                    st.error(f"Ein Fehler ist aufgetreten: {str(e)}")
    
    # List existing positions
    st.markdown("#### Aktuelle Positionen")
    positions = data_service.get_positions(hospital.id)
    
    if not positions:
        st.info("Noch keine Positionen vorhanden.")
    else:
        for position in positions:
            with st.expander(f"{position.title} - {position.department}"):
                st.markdown(f"**Beschreibung:** {position.description}")
                st.markdown(f"**Dauer:** {position.duration}")
                st.markdown(f"**Verg√ºtung:** {position.stipend}‚Ç¨")
                st.markdown("**Anforderungen:**")
                for req in position.requirements:
                    st.markdown(f"- {req}")
                
                # Edit and delete buttons
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("Bearbeiten", key=f"edit_{position.id}"):
                        st.session_state.editing_position = position.id
                        st.rerun()
                with col2:
                    if st.button("L√∂schen", key=f"delete_{position.id}"):
                        if st.session_state.get(f"confirm_delete_{position.id}"):
                            data_service.delete_position(position.id)
                            st.success("Position gel√∂scht!")
                            st.rerun()
                        else:
                            st.session_state[f"confirm_delete_{position.id}"] = True
                            st.warning("Klicken Sie erneut auf 'L√∂schen' um zu best√§tigen.")

with tab2:
    st.markdown("#### Bewerbungen")
    
    # Get all positions with applications
    positions = data_service.get_positions(hospital.id)
    has_applications = False
    
    for position in positions:
        applications = data_service.get_applications_for_position(position.id)
        if applications:
            has_applications = True
            st.markdown(f"### {position.title} - {position.department}")
            st.markdown(f"**Anzahl Bewerbungen:** {len(applications)}")
            
            for application in applications:
                student = data_service.get_student(application.student_id)
                if student:
                    with st.expander(f"Bewerbung von {student.name}"):
                        st.markdown(f"**Name:** {student.name}")
                        st.markdown(f"**Studienjahr:** {student.year}")
                        st.markdown(f"**Verf√ºgbarkeit:** {student.availability}")
                        st.markdown("**Interessen:**")
                        for interest in student.interests:
                            st.markdown(f"- {interest}")
                        if student.certifications:
                            st.markdown("**Zertifizierungen:**")
                            for cert in student.certifications:
                                st.markdown(f"- {cert}")
                        
                        # Application actions
                        col1, col2 = st.columns(2)
                        with col1:
                            if st.button("Annehmen", key=f"accept_{application.id}"):
                                data_service.update_match_status(application.id, 'accepted')
                                st.success("Bewerbung angenommen!")
                                st.rerun()
                        with col2:
                            if st.button("Ablehnen", key=f"reject_{application.id}"):
                                data_service.update_match_status(application.id, 'rejected')
                                st.success("Bewerbung abgelehnt!")
                                st.rerun()
    
    if not has_applications:
        st.info("Noch keine Bewerbungen vorhanden.")

with tab3:
    st.markdown("#### Profil")
    st.markdown(f"**Name:** {hospital.name}")
    st.markdown(f"**E-Mail:** {hospital.email}")
    st.markdown(f"**Standort:** {hospital.location}")
    
    # Edit profile form
    with st.expander("Profil bearbeiten"):
        with st.form("edit_profile_form"):
            new_name = st.text_input("Neuer Name", value=hospital.name)
            new_location = st.text_input("Neuer Standort", value=hospital.location)
            
            submitted = st.form_submit_button("Profil aktualisieren")
            if submitted:
                try:
                    data_service.update_hospital(
                        hospital.id,
                        name=new_name,
                        location=new_location
                    )
                    st.success("Profil erfolgreich aktualisiert!")
                    st.rerun()
                except Exception as e:
                    st.error(f"Ein Fehler ist aufgetreten: {str(e)}") 